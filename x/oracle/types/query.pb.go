// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oracle/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryCountsRequest is request type for the Query/Count RPC method.
type QueryCountsRequest struct {
}

func (m *QueryCountsRequest) Reset()         { *m = QueryCountsRequest{} }
func (m *QueryCountsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCountsRequest) ProtoMessage()    {}
func (*QueryCountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{0}
}
func (m *QueryCountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCountsRequest.Merge(m, src)
}
func (m *QueryCountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCountsRequest proto.InternalMessageInfo

// QueryCountsResponse is response type for the Query/Count RPC method.
type QueryCountsResponse struct {
	// DataSourceCount is total number of data sources available on the chain
	DataSourceCount int64 `protobuf:"varint,1,opt,name=data_source_count,json=dataSourceCount,proto3" json:"data_source_count,omitempty"`
	// OracleScriptCount is total number of oracle scripts available on the chain
	OracleScriptCount int64 `protobuf:"varint,2,opt,name=oracle_script_count,json=oracleScriptCount,proto3" json:"oracle_script_count,omitempty"`
	// RequestCount is total number of requests submitted to the chain
	RequestCount int64 `protobuf:"varint,3,opt,name=request_count,json=requestCount,proto3" json:"request_count,omitempty"`
}

func (m *QueryCountsResponse) Reset()         { *m = QueryCountsResponse{} }
func (m *QueryCountsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCountsResponse) ProtoMessage()    {}
func (*QueryCountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{1}
}
func (m *QueryCountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCountsResponse.Merge(m, src)
}
func (m *QueryCountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCountsResponse proto.InternalMessageInfo

func (m *QueryCountsResponse) GetDataSourceCount() int64 {
	if m != nil {
		return m.DataSourceCount
	}
	return 0
}

func (m *QueryCountsResponse) GetOracleScriptCount() int64 {
	if m != nil {
		return m.OracleScriptCount
	}
	return 0
}

func (m *QueryCountsResponse) GetRequestCount() int64 {
	if m != nil {
		return m.RequestCount
	}
	return 0
}

// QueryDataRequest is request type for the Query/Data RPC method.
type QueryDataRequest struct {
	// DataHash is SHA256 hash of the file's content, which can be data source or
	// oracle script
	DataHash string `protobuf:"bytes,1,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
}

func (m *QueryDataRequest) Reset()         { *m = QueryDataRequest{} }
func (m *QueryDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDataRequest) ProtoMessage()    {}
func (*QueryDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{2}
}
func (m *QueryDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataRequest.Merge(m, src)
}
func (m *QueryDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataRequest proto.InternalMessageInfo

func (m *QueryDataRequest) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

// QueryDataResponse is response type for the Query/Data RPC method.
type QueryDataResponse struct {
	// Data is file's content, which can be data source or oracle script
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *QueryDataResponse) Reset()         { *m = QueryDataResponse{} }
func (m *QueryDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDataResponse) ProtoMessage()    {}
func (*QueryDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{3}
}
func (m *QueryDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataResponse.Merge(m, src)
}
func (m *QueryDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataResponse proto.InternalMessageInfo

func (m *QueryDataResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// QueryDataSourceRequest is request type for the Query/DataSource RPC method.
type QueryDataSourceRequest struct {
	// DataSourceID is ID of a data source script
	DataSourceId int64 `protobuf:"varint,1,opt,name=data_source_id,json=dataSourceId,proto3" json:"data_source_id,omitempty"`
}

func (m *QueryDataSourceRequest) Reset()         { *m = QueryDataSourceRequest{} }
func (m *QueryDataSourceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDataSourceRequest) ProtoMessage()    {}
func (*QueryDataSourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{4}
}
func (m *QueryDataSourceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataSourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataSourceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataSourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataSourceRequest.Merge(m, src)
}
func (m *QueryDataSourceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataSourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataSourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataSourceRequest proto.InternalMessageInfo

func (m *QueryDataSourceRequest) GetDataSourceId() int64 {
	if m != nil {
		return m.DataSourceId
	}
	return 0
}

// QueryDataSourceResponse is response type for the Query/DataSource RPC method.
type QueryDataSourceResponse struct {
	// DataSource is summary information of a data source
	DataSource *DataSource `protobuf:"bytes,1,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"`
}

func (m *QueryDataSourceResponse) Reset()         { *m = QueryDataSourceResponse{} }
func (m *QueryDataSourceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDataSourceResponse) ProtoMessage()    {}
func (*QueryDataSourceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{5}
}
func (m *QueryDataSourceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataSourceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataSourceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataSourceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataSourceResponse.Merge(m, src)
}
func (m *QueryDataSourceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataSourceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataSourceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataSourceResponse proto.InternalMessageInfo

func (m *QueryDataSourceResponse) GetDataSource() *DataSource {
	if m != nil {
		return m.DataSource
	}
	return nil
}

// QueryOracleScriptRequest is request type for the Query/OracleScript RPC
// method.
type QueryOracleScriptRequest struct {
	// OracleScriptID is ID of an oracle script
	OracleScriptId int64 `protobuf:"varint,1,opt,name=oracle_script_id,json=oracleScriptId,proto3" json:"oracle_script_id,omitempty"`
}

func (m *QueryOracleScriptRequest) Reset()         { *m = QueryOracleScriptRequest{} }
func (m *QueryOracleScriptRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleScriptRequest) ProtoMessage()    {}
func (*QueryOracleScriptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{6}
}
func (m *QueryOracleScriptRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleScriptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleScriptRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleScriptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleScriptRequest.Merge(m, src)
}
func (m *QueryOracleScriptRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleScriptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleScriptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleScriptRequest proto.InternalMessageInfo

func (m *QueryOracleScriptRequest) GetOracleScriptId() int64 {
	if m != nil {
		return m.OracleScriptId
	}
	return 0
}

// QueryOracleScriptResponse is response type for the Query/OracleScript RPC
// method.
type QueryOracleScriptResponse struct {
	// OracleScript is summary information of an oracle script
	OracleScript *OracleScript `protobuf:"bytes,1,opt,name=oracle_script,json=oracleScript,proto3" json:"oracle_script,omitempty"`
}

func (m *QueryOracleScriptResponse) Reset()         { *m = QueryOracleScriptResponse{} }
func (m *QueryOracleScriptResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOracleScriptResponse) ProtoMessage()    {}
func (*QueryOracleScriptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{7}
}
func (m *QueryOracleScriptResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleScriptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleScriptResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleScriptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleScriptResponse.Merge(m, src)
}
func (m *QueryOracleScriptResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleScriptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleScriptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleScriptResponse proto.InternalMessageInfo

func (m *QueryOracleScriptResponse) GetOracleScript() *OracleScript {
	if m != nil {
		return m.OracleScript
	}
	return nil
}

// QueryRequestRequest is request type for the Query/Request RPC method.
type QueryRequestRequest struct {
	// RequestID is ID of an oracle request
	RequestId int64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *QueryRequestRequest) Reset()         { *m = QueryRequestRequest{} }
func (m *QueryRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRequestRequest) ProtoMessage()    {}
func (*QueryRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{8}
}
func (m *QueryRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequestRequest.Merge(m, src)
}
func (m *QueryRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequestRequest proto.InternalMessageInfo

func (m *QueryRequestRequest) GetRequestId() int64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

// QueryRequestResponse is response type for the Query/Request RPC method.
type QueryRequestResponse struct {
	// RequestPacketData is information of oracle request submitted by a client
	RequestPacketData *OracleRequestPacketData `protobuf:"bytes,1,opt,name=request_packet_data,json=requestPacketData,proto3" json:"request_packet_data,omitempty"`
	// ResponsePacketData is information of oracle result that fulfilled the
	// oracle request. The result can be empty if the request has not been
	// fulfilled yet.
	ResponsePacketData *OracleResponsePacketData `protobuf:"bytes,2,opt,name=response_packet_data,json=responsePacketData,proto3" json:"response_packet_data,omitempty"`
}

func (m *QueryRequestResponse) Reset()         { *m = QueryRequestResponse{} }
func (m *QueryRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRequestResponse) ProtoMessage()    {}
func (*QueryRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{9}
}
func (m *QueryRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequestResponse.Merge(m, src)
}
func (m *QueryRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequestResponse proto.InternalMessageInfo

func (m *QueryRequestResponse) GetRequestPacketData() *OracleRequestPacketData {
	if m != nil {
		return m.RequestPacketData
	}
	return nil
}

func (m *QueryRequestResponse) GetResponsePacketData() *OracleResponsePacketData {
	if m != nil {
		return m.ResponsePacketData
	}
	return nil
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{10}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// pagination defines an optional pagination for the request.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{11}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryValidatorRequest is request type for the Query/Validator RPC method.
type QueryValidatorRequest struct {
	// ValidatorAddress is address of a validator
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
}

func (m *QueryValidatorRequest) Reset()         { *m = QueryValidatorRequest{} }
func (m *QueryValidatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorRequest) ProtoMessage()    {}
func (*QueryValidatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{12}
}
func (m *QueryValidatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorRequest.Merge(m, src)
}
func (m *QueryValidatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorRequest proto.InternalMessageInfo

func (m *QueryValidatorRequest) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

// QueryValidatorResponse is response type for the Query/Validator RPC method.
type QueryValidatorResponse struct {
	// Status is status of a validator e.g. active/inactive
	Status *ValidatorStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *QueryValidatorResponse) Reset()         { *m = QueryValidatorResponse{} }
func (m *QueryValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorResponse) ProtoMessage()    {}
func (*QueryValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{13}
}
func (m *QueryValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorResponse.Merge(m, src)
}
func (m *QueryValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorResponse proto.InternalMessageInfo

func (m *QueryValidatorResponse) GetStatus() *ValidatorStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// QueryReportersRequest is request type for the Query/Reporters RPC method.
type QueryReportersRequest struct {
	// ValidatorAddress is a validator address
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
}

func (m *QueryReportersRequest) Reset()         { *m = QueryReportersRequest{} }
func (m *QueryReportersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReportersRequest) ProtoMessage()    {}
func (*QueryReportersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{14}
}
func (m *QueryReportersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReportersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReportersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReportersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReportersRequest.Merge(m, src)
}
func (m *QueryReportersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReportersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReportersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReportersRequest proto.InternalMessageInfo

func (m *QueryReportersRequest) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

// QueryReportersResponse is response type for the Query/Reporters RPC method.
type QueryReportersResponse struct {
	// Reporter is a list of account addresses of reporters
	Reporter []string `protobuf:"bytes,1,rep,name=reporter,proto3" json:"reporter,omitempty"`
}

func (m *QueryReportersResponse) Reset()         { *m = QueryReportersResponse{} }
func (m *QueryReportersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReportersResponse) ProtoMessage()    {}
func (*QueryReportersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{15}
}
func (m *QueryReportersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReportersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReportersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReportersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReportersResponse.Merge(m, src)
}
func (m *QueryReportersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReportersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReportersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReportersResponse proto.InternalMessageInfo

func (m *QueryReportersResponse) GetReporter() []string {
	if m != nil {
		return m.Reporter
	}
	return nil
}

// QueryActiveValidatorsRequest is request type for the Query/ActiveValidators
// RPC method.
type QueryActiveValidatorsRequest struct {
}

func (m *QueryActiveValidatorsRequest) Reset()         { *m = QueryActiveValidatorsRequest{} }
func (m *QueryActiveValidatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryActiveValidatorsRequest) ProtoMessage()    {}
func (*QueryActiveValidatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{16}
}
func (m *QueryActiveValidatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveValidatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveValidatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveValidatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveValidatorsRequest.Merge(m, src)
}
func (m *QueryActiveValidatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveValidatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveValidatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveValidatorsRequest proto.InternalMessageInfo

// QueryActiveValidatorsResponse is response type for the Query/ActiveValidators
// RPC method.
type QueryActiveValidatorsResponse struct {
	// Count is number of active validators
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *QueryActiveValidatorsResponse) Reset()         { *m = QueryActiveValidatorsResponse{} }
func (m *QueryActiveValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryActiveValidatorsResponse) ProtoMessage()    {}
func (*QueryActiveValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{17}
}
func (m *QueryActiveValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveValidatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveValidatorsResponse.Merge(m, src)
}
func (m *QueryActiveValidatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveValidatorsResponse proto.InternalMessageInfo

func (m *QueryActiveValidatorsResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// QueryRequestSearchRequest is request type for the Query/RequestSearch RPC
// method.
type QueryRequestSearchRequest struct {
	// OracleScriptID is ID of an oracle script
	OracleScriptId int64 `protobuf:"varint,1,opt,name=oracle_script_id,json=oracleScriptId,proto3" json:"oracle_script_id,omitempty"`
	// Calldata is OBI-encoded data as argument params for the oracle script
	Calldata []byte `protobuf:"bytes,2,opt,name=calldata,proto3" json:"calldata,omitempty"`
	// AskCount is number of validators allowed for fulfilling the request
	AskCount int64 `protobuf:"varint,3,opt,name=ask_count,json=askCount,proto3" json:"ask_count,omitempty"`
	// MinCount is number of validators required for fulfilling the request
	MinCount int64 `protobuf:"varint,4,opt,name=min_count,json=minCount,proto3" json:"min_count,omitempty"`
}

func (m *QueryRequestSearchRequest) Reset()         { *m = QueryRequestSearchRequest{} }
func (m *QueryRequestSearchRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRequestSearchRequest) ProtoMessage()    {}
func (*QueryRequestSearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{18}
}
func (m *QueryRequestSearchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequestSearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequestSearchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRequestSearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequestSearchRequest.Merge(m, src)
}
func (m *QueryRequestSearchRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequestSearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequestSearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequestSearchRequest proto.InternalMessageInfo

func (m *QueryRequestSearchRequest) GetOracleScriptId() int64 {
	if m != nil {
		return m.OracleScriptId
	}
	return 0
}

func (m *QueryRequestSearchRequest) GetCalldata() []byte {
	if m != nil {
		return m.Calldata
	}
	return nil
}

func (m *QueryRequestSearchRequest) GetAskCount() int64 {
	if m != nil {
		return m.AskCount
	}
	return 0
}

func (m *QueryRequestSearchRequest) GetMinCount() int64 {
	if m != nil {
		return m.MinCount
	}
	return 0
}

// QueryRequestSearchResponse is response type for the Query/RequestSearch RPC
// method.
type QueryRequestSearchResponse struct {
	Test string `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
}

func (m *QueryRequestSearchResponse) Reset()         { *m = QueryRequestSearchResponse{} }
func (m *QueryRequestSearchResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRequestSearchResponse) ProtoMessage()    {}
func (*QueryRequestSearchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{19}
}
func (m *QueryRequestSearchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequestSearchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequestSearchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRequestSearchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequestSearchResponse.Merge(m, src)
}
func (m *QueryRequestSearchResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequestSearchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequestSearchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequestSearchResponse proto.InternalMessageInfo

func (m *QueryRequestSearchResponse) GetTest() string {
	if m != nil {
		return m.Test
	}
	return ""
}

// QueryRequestPriceRequest is request type for the Query/RequestPrice RPC
// method.
type QueryRequestPriceRequest struct {
	// Symbol is unit of data indicating what the data is
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// AskCount is number of validators allowed for fulfilling the request
	AskCount int64 `protobuf:"varint,2,opt,name=ask_count,json=askCount,proto3" json:"ask_count,omitempty"`
	// MinCount is number of validators required for fulfilling the request
	MinCount int64 `protobuf:"varint,3,opt,name=min_count,json=minCount,proto3" json:"min_count,omitempty"`
}

func (m *QueryRequestPriceRequest) Reset()         { *m = QueryRequestPriceRequest{} }
func (m *QueryRequestPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRequestPriceRequest) ProtoMessage()    {}
func (*QueryRequestPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{20}
}
func (m *QueryRequestPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequestPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequestPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRequestPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequestPriceRequest.Merge(m, src)
}
func (m *QueryRequestPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequestPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequestPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequestPriceRequest proto.InternalMessageInfo

func (m *QueryRequestPriceRequest) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *QueryRequestPriceRequest) GetAskCount() int64 {
	if m != nil {
		return m.AskCount
	}
	return 0
}

func (m *QueryRequestPriceRequest) GetMinCount() int64 {
	if m != nil {
		return m.MinCount
	}
	return 0
}

// QueryRequestPriceResponse is response type for the Query/RequestPrice RPC
// method.
type QueryRequestPriceResponse struct {
	// Symbol is unit of data indicating what the data is. It is price currencies for this case.
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Multiplier is a number used for left-shifting value to eliminate decimal digits
	Multiplier uint64 `protobuf:"varint,2,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	// Rate is the actual data, which is rate number multiplied by the multiplier.
	Rate uint64 `protobuf:"varint,3,opt,name=rate,proto3" json:"rate,omitempty"`
	// RequestID is oracle request ID that contains this price
	RequestID RequestID `protobuf:"varint,4,opt,name=request_id,json=requestId,proto3,casttype=RequestID" json:"request_id,omitempty"`
	// ResolveTime is epoch timestamp indicating the time when the request had been resolved
	ResolveTime int64 `protobuf:"varint,5,opt,name=resolve_time,json=resolveTime,proto3" json:"resolve_time,omitempty"`
}

func (m *QueryRequestPriceResponse) Reset()         { *m = QueryRequestPriceResponse{} }
func (m *QueryRequestPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRequestPriceResponse) ProtoMessage()    {}
func (*QueryRequestPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{21}
}
func (m *QueryRequestPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequestPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequestPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRequestPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequestPriceResponse.Merge(m, src)
}
func (m *QueryRequestPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequestPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequestPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequestPriceResponse proto.InternalMessageInfo

func (m *QueryRequestPriceResponse) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *QueryRequestPriceResponse) GetMultiplier() uint64 {
	if m != nil {
		return m.Multiplier
	}
	return 0
}

func (m *QueryRequestPriceResponse) GetRate() uint64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *QueryRequestPriceResponse) GetRequestID() RequestID {
	if m != nil {
		return m.RequestID
	}
	return 0
}

func (m *QueryRequestPriceResponse) GetResolveTime() int64 {
	if m != nil {
		return m.ResolveTime
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryCountsRequest)(nil), "oracle.v1.QueryCountsRequest")
	proto.RegisterType((*QueryCountsResponse)(nil), "oracle.v1.QueryCountsResponse")
	proto.RegisterType((*QueryDataRequest)(nil), "oracle.v1.QueryDataRequest")
	proto.RegisterType((*QueryDataResponse)(nil), "oracle.v1.QueryDataResponse")
	proto.RegisterType((*QueryDataSourceRequest)(nil), "oracle.v1.QueryDataSourceRequest")
	proto.RegisterType((*QueryDataSourceResponse)(nil), "oracle.v1.QueryDataSourceResponse")
	proto.RegisterType((*QueryOracleScriptRequest)(nil), "oracle.v1.QueryOracleScriptRequest")
	proto.RegisterType((*QueryOracleScriptResponse)(nil), "oracle.v1.QueryOracleScriptResponse")
	proto.RegisterType((*QueryRequestRequest)(nil), "oracle.v1.QueryRequestRequest")
	proto.RegisterType((*QueryRequestResponse)(nil), "oracle.v1.QueryRequestResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "oracle.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "oracle.v1.QueryParamsResponse")
	proto.RegisterType((*QueryValidatorRequest)(nil), "oracle.v1.QueryValidatorRequest")
	proto.RegisterType((*QueryValidatorResponse)(nil), "oracle.v1.QueryValidatorResponse")
	proto.RegisterType((*QueryReportersRequest)(nil), "oracle.v1.QueryReportersRequest")
	proto.RegisterType((*QueryReportersResponse)(nil), "oracle.v1.QueryReportersResponse")
	proto.RegisterType((*QueryActiveValidatorsRequest)(nil), "oracle.v1.QueryActiveValidatorsRequest")
	proto.RegisterType((*QueryActiveValidatorsResponse)(nil), "oracle.v1.QueryActiveValidatorsResponse")
	proto.RegisterType((*QueryRequestSearchRequest)(nil), "oracle.v1.QueryRequestSearchRequest")
	proto.RegisterType((*QueryRequestSearchResponse)(nil), "oracle.v1.QueryRequestSearchResponse")
	proto.RegisterType((*QueryRequestPriceRequest)(nil), "oracle.v1.QueryRequestPriceRequest")
	proto.RegisterType((*QueryRequestPriceResponse)(nil), "oracle.v1.QueryRequestPriceResponse")
}

func init() { proto.RegisterFile("oracle/v1/query.proto", fileDescriptor_34238c8dfdfcd7ec) }

var fileDescriptor_34238c8dfdfcd7ec = []byte{
	// 1168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xcf, 0x6b, 0x24, 0x45,
	0x14, 0x4e, 0x27, 0x93, 0x98, 0x79, 0x99, 0xac, 0x99, 0xca, 0x8f, 0x4d, 0x3a, 0xc9, 0x24, 0xe9,
	0x44, 0x12, 0x37, 0x3a, 0xbd, 0xc9, 0xae, 0x82, 0x20, 0xc2, 0xc6, 0xb0, 0x18, 0x10, 0xdc, 0xed,
	0xa8, 0xa0, 0x97, 0xa1, 0xd2, 0x53, 0x66, 0x9a, 0xf4, 0x4c, 0xcf, 0x76, 0xd5, 0x04, 0x43, 0x0c,
	0xc2, 0x8a, 0x27, 0x41, 0x04, 0xc1, 0x8b, 0x7f, 0x8d, 0x07, 0x61, 0x8f, 0x0b, 0x5e, 0xbc, 0xb8,
	0x48, 0xe2, 0x5f, 0xe1, 0x49, 0xba, 0xea, 0x75, 0x4f, 0xf5, 0x8f, 0x99, 0xc5, 0xbd, 0x75, 0xbf,
	0xf7, 0xd5, 0xf7, 0xbe, 0xaa, 0xae, 0xf7, 0xbd, 0x19, 0x98, 0x0f, 0x42, 0xea, 0xfa, 0xcc, 0x3e,
	0xdf, 0xb3, 0x9f, 0xf4, 0x58, 0x78, 0x51, 0xef, 0x86, 0x81, 0x08, 0x48, 0x59, 0x85, 0xeb, 0xe7,
	0x7b, 0xe6, 0xdc, 0x69, 0x70, 0x1a, 0xc8, 0xa8, 0x1d, 0x3d, 0x29, 0x80, 0xb9, 0x72, 0x1a, 0x04,
	0xa7, 0x3e, 0xb3, 0x69, 0xd7, 0xb3, 0x69, 0xa7, 0x13, 0x08, 0x2a, 0xbc, 0xa0, 0xc3, 0x31, 0xbb,
	0xd0, 0x67, 0x45, 0x22, 0x19, 0xb7, 0xe6, 0x80, 0x3c, 0x8e, 0xaa, 0x7c, 0x18, 0xf4, 0x3a, 0x82,
	0x3b, 0xec, 0x49, 0x8f, 0x71, 0x61, 0xfd, 0x62, 0xc0, 0x6c, 0x2a, 0xcc, 0xbb, 0x41, 0x87, 0x33,
	0x72, 0x07, 0xaa, 0x4d, 0x2a, 0x68, 0x83, 0x07, 0xbd, 0xd0, 0x65, 0x0d, 0x37, 0xca, 0x2e, 0x1a,
	0xeb, 0xc6, 0xce, 0x98, 0xf3, 0x7a, 0x94, 0x38, 0x96, 0x71, 0xb9, 0x88, 0xd4, 0x61, 0x56, 0x55,
	0x6a, 0x70, 0x37, 0xf4, 0xba, 0x02, 0xd1, 0xa3, 0x12, 0x5d, 0x55, 0xa9, 0x63, 0x99, 0x51, 0xf8,
	0x4d, 0x98, 0x0e, 0x55, 0x79, 0x44, 0x8e, 0x49, 0x64, 0x05, 0x83, 0x12, 0x64, 0xd9, 0x30, 0x23,
	0x75, 0x1d, 0x52, 0x41, 0x51, 0x2c, 0x59, 0x86, 0xb2, 0x14, 0xd5, 0xa2, 0xbc, 0x25, 0xc5, 0x94,
	0x9d, 0xc9, 0x28, 0xf0, 0x11, 0xe5, 0x2d, 0x6b, 0x1b, 0xaa, 0xda, 0x02, 0xdc, 0x06, 0x81, 0x52,
	0x04, 0x90, 0xe0, 0x8a, 0x23, 0x9f, 0xad, 0x0f, 0x60, 0x21, 0x01, 0xaa, 0x6d, 0xc4, 0xfc, 0x5b,
	0x70, 0x4b, 0xdf, 0xb4, 0xd7, 0xc4, 0x1d, 0x57, 0xfa, 0x3b, 0x3e, 0x6a, 0x5a, 0x8f, 0xe1, 0x76,
	0x6e, 0x3d, 0x96, 0x7b, 0x17, 0xa6, 0x34, 0x02, 0xb9, 0x7a, 0x6a, 0x7f, 0xbe, 0x9e, 0x7c, 0xd0,
	0xba, 0xb6, 0x06, 0xfa, 0xa4, 0xd6, 0x21, 0x2c, 0x4a, 0xca, 0x4f, 0xb4, 0xb3, 0x8a, 0x45, 0xed,
	0xc0, 0x4c, 0xfa, 0x74, 0x13, 0x59, 0xb7, 0xf4, 0xa3, 0x3d, 0x6a, 0x5a, 0x5f, 0xc0, 0x52, 0x01,
	0x0b, 0x4a, 0x7b, 0x1f, 0xa6, 0x53, 0x34, 0x28, 0xee, 0xb6, 0x26, 0x2e, 0xb5, 0xae, 0xa2, 0x93,
	0x5b, 0xf7, 0xf1, 0x96, 0xa0, 0xa8, 0x58, 0xdb, 0x2a, 0x40, 0xfc, 0x25, 0x13, 0x55, 0x65, 0x8c,
	0x1c, 0x35, 0xad, 0xdf, 0x0c, 0x98, 0x4b, 0x2f, 0x43, 0x31, 0x0e, 0xcc, 0xc6, 0xeb, 0xba, 0xd4,
	0x3d, 0x63, 0xa2, 0x91, 0x7c, 0xa5, 0xa9, 0x7d, 0x2b, 0x27, 0x09, 0x97, 0x3f, 0x92, 0x50, 0xf9,
	0x7d, 0xab, 0x61, 0x36, 0x44, 0x3e, 0x83, 0xb9, 0x10, 0xf9, 0x53, 0xa4, 0xa3, 0x92, 0x74, 0xb3,
	0x80, 0x54, 0x81, 0x35, 0x56, 0x12, 0xe6, 0x62, 0x49, 0xdb, 0x3c, 0xa2, 0x21, 0x6d, 0x27, 0x6d,
	0xf3, 0x10, 0xcf, 0x23, 0x8e, 0xe2, 0xbe, 0x6c, 0x98, 0xe8, 0xca, 0x08, 0x6e, 0xa5, 0xaa, 0x55,
	0x55, 0xd0, 0x83, 0xd2, 0xb3, 0x17, 0x6b, 0x23, 0x0e, 0xc2, 0xac, 0x43, 0x98, 0x97, 0x3c, 0x9f,
	0x53, 0xdf, 0x6b, 0x52, 0x11, 0x84, 0xf1, 0xc9, 0xee, 0x42, 0xf5, 0x3c, 0x8e, 0x35, 0x68, 0xb3,
	0x19, 0x32, 0xce, 0xf1, 0xca, 0xcf, 0x24, 0x89, 0x07, 0x2a, 0x6e, 0x7d, 0x8c, 0x37, 0x5a, 0x63,
	0x41, 0x41, 0xfb, 0x30, 0xc1, 0x05, 0x15, 0xbd, 0x58, 0x90, 0xa9, 0x09, 0x4a, 0xd0, 0xc7, 0x12,
	0xe1, 0x20, 0x32, 0xd1, 0xe4, 0xb0, 0x6e, 0x10, 0x0a, 0x16, 0xf2, 0x57, 0xd2, 0x74, 0x1f, 0x35,
	0x69, 0x2c, 0xa8, 0xc9, 0x84, 0xc9, 0x10, 0x83, 0x8b, 0xc6, 0xfa, 0x58, 0xd4, 0xc4, 0xf1, 0xbb,
	0x55, 0x83, 0x15, 0xb9, 0xea, 0x81, 0x2b, 0xbc, 0x73, 0x96, 0x28, 0x4c, 0xce, 0xfd, 0x1d, 0x58,
	0x1d, 0x90, 0x47, 0xf2, 0x39, 0x18, 0xd7, 0xbd, 0x4a, 0xbd, 0x58, 0xbf, 0x1a, 0xd8, 0x1a, 0xc8,
	0x73, 0xcc, 0x68, 0xe8, 0xb6, 0xfe, 0x77, 0x87, 0x45, 0xd2, 0x5d, 0xea, 0xfb, 0xc9, 0xbd, 0xaa,
	0x38, 0xc9, 0x7b, 0x64, 0x4e, 0x94, 0x9f, 0xa5, 0x1c, 0x6d, 0x92, 0xf2, 0x33, 0x65, 0x79, 0xcb,
	0x50, 0x6e, 0x7b, 0x1d, 0x4c, 0x96, 0x54, 0xb2, 0xed, 0x75, 0x94, 0xd5, 0xdd, 0x05, 0xb3, 0x48,
	0x5c, 0xdf, 0xc2, 0x04, 0xe3, 0x02, 0x0f, 0x5a, 0x3e, 0x5b, 0x3e, 0xfa, 0x45, 0xdc, 0x18, 0xa1,
	0xd7, 0x37, 0xb1, 0x05, 0x98, 0xe0, 0x17, 0xed, 0x93, 0xc0, 0xc7, 0x15, 0xf8, 0x96, 0xd6, 0x37,
	0x3a, 0x4c, 0xdf, 0x58, 0x46, 0xdf, 0xef, 0x99, 0xd3, 0xc3, 0x72, 0xa8, 0x6f, 0x50, 0xbd, 0x1a,
	0x40, 0xbb, 0xe7, 0x0b, 0xaf, 0xeb, 0x7b, 0x2c, 0x94, 0x05, 0x4b, 0x8e, 0x16, 0x89, 0xf6, 0x15,
	0x52, 0xc1, 0x64, 0xb5, 0x92, 0x23, 0x9f, 0xc9, 0x7b, 0x29, 0x3f, 0x91, 0xe7, 0x74, 0x60, 0x5e,
	0xbf, 0x58, 0x2b, 0x63, 0xe5, 0xa3, 0xc3, 0x7f, 0xf5, 0x17, 0xcd, 0x6b, 0xc8, 0x06, 0x54, 0x42,
	0xc6, 0x03, 0xff, 0x9c, 0x35, 0x84, 0xd7, 0x66, 0x8b, 0xe3, 0x72, 0x13, 0x53, 0x18, 0xfb, 0xd4,
	0x6b, 0xb3, 0xfd, 0xbf, 0x00, 0xc6, 0xe5, 0x3e, 0xc8, 0x09, 0x4c, 0xa8, 0x79, 0x47, 0x56, 0xb5,
	0x86, 0xc8, 0x8f, 0x47, 0xb3, 0x36, 0x28, 0xad, 0x36, 0x6f, 0x2d, 0x3d, 0xfd, 0xe3, 0x9f, 0x9f,
	0x47, 0x67, 0x49, 0xd5, 0xee, 0x4f, 0x5d, 0x57, 0x31, 0x7f, 0x05, 0x25, 0xe9, 0x4b, 0xcb, 0x59,
	0x0a, 0x6d, 0xa2, 0x99, 0x2b, 0xc5, 0x49, 0x64, 0xdf, 0x94, 0xec, 0xab, 0x64, 0x59, 0x63, 0x8f,
	0xee, 0x9a, 0x7d, 0x99, 0x8c, 0xc1, 0x2b, 0xf2, 0xbd, 0x01, 0xd0, 0x1f, 0x2b, 0x64, 0xa3, 0x88,
	0x31, 0x35, 0xe6, 0x4c, 0x6b, 0x18, 0x04, 0x4b, 0xdf, 0x95, 0xa5, 0xef, 0x90, 0x9d, 0x4c, 0x69,
	0x1c, 0x6d, 0x1c, 0x25, 0x24, 0x93, 0xf2, 0x8a, 0xfc, 0x68, 0x40, 0x45, 0x9f, 0x20, 0x64, 0x33,
	0x5b, 0xa6, 0x60, 0xba, 0x99, 0x5b, 0xc3, 0x41, 0xa8, 0xe6, 0x9e, 0x54, 0xf3, 0x36, 0xd9, 0xb5,
	0xb3, 0x3f, 0x6e, 0xb0, 0x65, 0xed, 0xcb, 0x6c, 0x07, 0x5f, 0x11, 0x0e, 0xaf, 0xc5, 0x3d, 0x91,
	0xfb, 0x8c, 0xe9, 0x39, 0x66, 0xae, 0x0d, 0xcc, 0xa3, 0x80, 0x6d, 0x29, 0x60, 0x83, 0xac, 0x69,
	0x02, 0xf0, 0xee, 0xd9, 0x97, 0xfd, 0x2b, 0x7b, 0x45, 0xbe, 0x33, 0xa0, 0x9c, 0xd8, 0x12, 0x59,
	0xcf, 0xf2, 0x66, 0x7d, 0xde, 0xdc, 0x18, 0x82, 0xc0, 0xda, 0x7b, 0xb2, 0xf6, 0x2e, 0x79, 0x53,
	0xab, 0x9d, 0xd8, 0x2d, 0xb7, 0x2f, 0x73, 0x9e, 0x7c, 0x45, 0x9e, 0x1a, 0x50, 0x4e, 0x8c, 0x37,
	0xaf, 0x22, 0xeb, 0xec, 0x79, 0x15, 0x39, 0xd7, 0x2e, 0xbc, 0x10, 0xb1, 0x6d, 0x17, 0x8b, 0xf8,
	0xc1, 0x80, 0x99, 0xac, 0x4f, 0x93, 0xed, 0x6c, 0xa5, 0x01, 0x4e, 0x6f, 0xee, 0xbc, 0x1c, 0x88,
	0xca, 0xb6, 0xa4, 0xb2, 0x1a, 0x59, 0xd1, 0x94, 0x51, 0x09, 0x6e, 0xf4, 0x8f, 0x29, 0x6a, 0x79,
	0x35, 0x81, 0xf3, 0x2d, 0x9f, 0x1a, 0xed, 0xf9, 0x96, 0x4f, 0xcf, 0xf8, 0xc2, 0x96, 0x57, 0xd3,
	0x9c, 0x7c, 0x0b, 0xd3, 0x29, 0x0f, 0x27, 0x5b, 0x03, 0xee, 0x55, 0x6a, 0xfe, 0x98, 0x6f, 0xbc,
	0x04, 0x85, 0x85, 0x37, 0x64, 0xe1, 0x65, 0xb2, 0x94, 0xbf, 0x83, 0x0d, 0xae, 0xea, 0x7d, 0x03,
	0x15, 0xdd, 0xa3, 0xf3, 0x2d, 0x58, 0x30, 0x30, 0xcc, 0xad, 0xe1, 0xa0, 0x74, 0x75, 0xab, 0xa8,
	0x7a, 0x37, 0x42, 0xf2, 0x83, 0x87, 0xcf, 0xae, 0x6b, 0xc6, 0xf3, 0xeb, 0x9a, 0xf1, 0xf7, 0x75,
	0xcd, 0xf8, 0xe9, 0xa6, 0x36, 0xf2, 0xfc, 0xa6, 0x36, 0xf2, 0xe7, 0x4d, 0x6d, 0xe4, 0xcb, 0xb7,
	0x4e, 0x3d, 0xd1, 0xea, 0x9d, 0xd4, 0xdd, 0xa0, 0x6d, 0x9f, 0xd0, 0x4e, 0x53, 0xfe, 0x23, 0x71,
	0x03, 0xdf, 0x76, 0x5b, 0xd4, 0xeb, 0xd8, 0x5f, 0xc7, 0x9c, 0xe2, 0xa2, 0xcb, 0xf8, 0xc9, 0x84,
	0x4c, 0xdf, 0xfb, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x71, 0xfb, 0x5e, 0xf7, 0x20, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Counts queries the number of existing data sources, oracle scripts, and
	// requests.
	Counts(ctx context.Context, in *QueryCountsRequest, opts ...grpc.CallOption) (*QueryCountsResponse, error)
	// Data queries content of the data source or oracle script for given SHA256
	// file hash.
	Data(ctx context.Context, in *QueryDataRequest, opts ...grpc.CallOption) (*QueryDataResponse, error)
	// DataSource queries data source summary info for given data source id.
	DataSource(ctx context.Context, in *QueryDataSourceRequest, opts ...grpc.CallOption) (*QueryDataSourceResponse, error)
	// OracleScript queries oracle script summary info for given oracle script id.
	OracleScript(ctx context.Context, in *QueryOracleScriptRequest, opts ...grpc.CallOption) (*QueryOracleScriptResponse, error)
	// Request queries request info for given request id.
	Request(ctx context.Context, in *QueryRequestRequest, opts ...grpc.CallOption) (*QueryRequestResponse, error)
	// Validator queries properties of given validator address.
	Validator(ctx context.Context, in *QueryValidatorRequest, opts ...grpc.CallOption) (*QueryValidatorResponse, error)
	// Reporters queries all reporters associated with given validator address.
	Reporters(ctx context.Context, in *QueryReportersRequest, opts ...grpc.CallOption) (*QueryReportersResponse, error)
	// ActiveValidators queries all active oracle validators.
	ActiveValidators(ctx context.Context, in *QueryActiveValidatorsRequest, opts ...grpc.CallOption) (*QueryActiveValidatorsResponse, error)
	// Params queries parameters used for runnning bandchain network.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// RequestSearch queries the latest request that match search criteria.
	RequestSearch(ctx context.Context, in *QueryRequestSearchRequest, opts ...grpc.CallOption) (*QueryRequestSearchResponse, error)
	// RequestPrice queries the latest price on standard price reference oracle
	// script.
	RequestPrice(ctx context.Context, in *QueryRequestPriceRequest, opts ...grpc.CallOption) (*QueryRequestPriceResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Counts(ctx context.Context, in *QueryCountsRequest, opts ...grpc.CallOption) (*QueryCountsResponse, error) {
	out := new(QueryCountsResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/Counts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Data(ctx context.Context, in *QueryDataRequest, opts ...grpc.CallOption) (*QueryDataResponse, error) {
	out := new(QueryDataResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/Data", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DataSource(ctx context.Context, in *QueryDataSourceRequest, opts ...grpc.CallOption) (*QueryDataSourceResponse, error) {
	out := new(QueryDataSourceResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/DataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleScript(ctx context.Context, in *QueryOracleScriptRequest, opts ...grpc.CallOption) (*QueryOracleScriptResponse, error) {
	out := new(QueryOracleScriptResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/OracleScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Request(ctx context.Context, in *QueryRequestRequest, opts ...grpc.CallOption) (*QueryRequestResponse, error) {
	out := new(QueryRequestResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Validator(ctx context.Context, in *QueryValidatorRequest, opts ...grpc.CallOption) (*QueryValidatorResponse, error) {
	out := new(QueryValidatorResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/Validator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Reporters(ctx context.Context, in *QueryReportersRequest, opts ...grpc.CallOption) (*QueryReportersResponse, error) {
	out := new(QueryReportersResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/Reporters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActiveValidators(ctx context.Context, in *QueryActiveValidatorsRequest, opts ...grpc.CallOption) (*QueryActiveValidatorsResponse, error) {
	out := new(QueryActiveValidatorsResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/ActiveValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RequestSearch(ctx context.Context, in *QueryRequestSearchRequest, opts ...grpc.CallOption) (*QueryRequestSearchResponse, error) {
	out := new(QueryRequestSearchResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/RequestSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RequestPrice(ctx context.Context, in *QueryRequestPriceRequest, opts ...grpc.CallOption) (*QueryRequestPriceResponse, error) {
	out := new(QueryRequestPriceResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/RequestPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Counts queries the number of existing data sources, oracle scripts, and
	// requests.
	Counts(context.Context, *QueryCountsRequest) (*QueryCountsResponse, error)
	// Data queries content of the data source or oracle script for given SHA256
	// file hash.
	Data(context.Context, *QueryDataRequest) (*QueryDataResponse, error)
	// DataSource queries data source summary info for given data source id.
	DataSource(context.Context, *QueryDataSourceRequest) (*QueryDataSourceResponse, error)
	// OracleScript queries oracle script summary info for given oracle script id.
	OracleScript(context.Context, *QueryOracleScriptRequest) (*QueryOracleScriptResponse, error)
	// Request queries request info for given request id.
	Request(context.Context, *QueryRequestRequest) (*QueryRequestResponse, error)
	// Validator queries properties of given validator address.
	Validator(context.Context, *QueryValidatorRequest) (*QueryValidatorResponse, error)
	// Reporters queries all reporters associated with given validator address.
	Reporters(context.Context, *QueryReportersRequest) (*QueryReportersResponse, error)
	// ActiveValidators queries all active oracle validators.
	ActiveValidators(context.Context, *QueryActiveValidatorsRequest) (*QueryActiveValidatorsResponse, error)
	// Params queries parameters used for runnning bandchain network.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// RequestSearch queries the latest request that match search criteria.
	RequestSearch(context.Context, *QueryRequestSearchRequest) (*QueryRequestSearchResponse, error)
	// RequestPrice queries the latest price on standard price reference oracle
	// script.
	RequestPrice(context.Context, *QueryRequestPriceRequest) (*QueryRequestPriceResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Counts(ctx context.Context, req *QueryCountsRequest) (*QueryCountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Counts not implemented")
}
func (*UnimplementedQueryServer) Data(ctx context.Context, req *QueryDataRequest) (*QueryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Data not implemented")
}
func (*UnimplementedQueryServer) DataSource(ctx context.Context, req *QueryDataSourceRequest) (*QueryDataSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataSource not implemented")
}
func (*UnimplementedQueryServer) OracleScript(ctx context.Context, req *QueryOracleScriptRequest) (*QueryOracleScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleScript not implemented")
}
func (*UnimplementedQueryServer) Request(ctx context.Context, req *QueryRequestRequest) (*QueryRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (*UnimplementedQueryServer) Validator(ctx context.Context, req *QueryValidatorRequest) (*QueryValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validator not implemented")
}
func (*UnimplementedQueryServer) Reporters(ctx context.Context, req *QueryReportersRequest) (*QueryReportersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reporters not implemented")
}
func (*UnimplementedQueryServer) ActiveValidators(ctx context.Context, req *QueryActiveValidatorsRequest) (*QueryActiveValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveValidators not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) RequestSearch(ctx context.Context, req *QueryRequestSearchRequest) (*QueryRequestSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSearch not implemented")
}
func (*UnimplementedQueryServer) RequestPrice(ctx context.Context, req *QueryRequestPriceRequest) (*QueryRequestPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPrice not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Counts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Counts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/Counts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Counts(ctx, req.(*QueryCountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Data_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Data(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/Data",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Data(ctx, req.(*QueryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/DataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DataSource(ctx, req.(*QueryDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/OracleScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleScript(ctx, req.(*QueryOracleScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Request(ctx, req.(*QueryRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Validator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Validator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/Validator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Validator(ctx, req.(*QueryValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Reporters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReportersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Reporters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/Reporters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Reporters(ctx, req.(*QueryReportersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActiveValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActiveValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActiveValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/ActiveValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActiveValidators(ctx, req.(*QueryActiveValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RequestSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequestSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RequestSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/RequestSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RequestSearch(ctx, req.(*QueryRequestSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RequestPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequestPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RequestPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/RequestPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RequestPrice(ctx, req.(*QueryRequestPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "oracle.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Counts",
			Handler:    _Query_Counts_Handler,
		},
		{
			MethodName: "Data",
			Handler:    _Query_Data_Handler,
		},
		{
			MethodName: "DataSource",
			Handler:    _Query_DataSource_Handler,
		},
		{
			MethodName: "OracleScript",
			Handler:    _Query_OracleScript_Handler,
		},
		{
			MethodName: "Request",
			Handler:    _Query_Request_Handler,
		},
		{
			MethodName: "Validator",
			Handler:    _Query_Validator_Handler,
		},
		{
			MethodName: "Reporters",
			Handler:    _Query_Reporters_Handler,
		},
		{
			MethodName: "ActiveValidators",
			Handler:    _Query_ActiveValidators_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "RequestSearch",
			Handler:    _Query_RequestSearch_Handler,
		},
		{
			MethodName: "RequestPrice",
			Handler:    _Query_RequestPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oracle/v1/query.proto",
}

func (m *QueryCountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestCount))
		i--
		dAtA[i] = 0x18
	}
	if m.OracleScriptCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OracleScriptCount))
		i--
		dAtA[i] = 0x10
	}
	if m.DataSourceCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DataSourceCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataSourceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataSourceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataSourceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataSourceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DataSourceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataSourceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataSourceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataSourceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataSource != nil {
		{
			size, err := m.DataSource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleScriptRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleScriptRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleScriptRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OracleScriptId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OracleScriptId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleScriptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleScriptResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleScriptResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OracleScript != nil {
		{
			size, err := m.OracleScript.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResponsePacketData != nil {
		{
			size, err := m.ResponsePacketData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RequestPacketData != nil {
		{
			size, err := m.RequestPacketData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryValidatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryReportersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReportersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReportersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryReportersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReportersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReportersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reporter) > 0 {
		for iNdEx := len(m.Reporter) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Reporter[iNdEx])
			copy(dAtA[i:], m.Reporter[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Reporter[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveValidatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveValidatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveValidatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryActiveValidatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveValidatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveValidatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRequestSearchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequestSearchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRequestSearchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MinCount))
		i--
		dAtA[i] = 0x20
	}
	if m.AskCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AskCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Calldata) > 0 {
		i -= len(m.Calldata)
		copy(dAtA[i:], m.Calldata)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Calldata)))
		i--
		dAtA[i] = 0x12
	}
	if m.OracleScriptId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OracleScriptId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRequestSearchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequestSearchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRequestSearchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Test) > 0 {
		i -= len(m.Test)
		copy(dAtA[i:], m.Test)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Test)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRequestPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequestPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRequestPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MinCount))
		i--
		dAtA[i] = 0x18
	}
	if m.AskCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AskCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRequestPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequestPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRequestPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResolveTime != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ResolveTime))
		i--
		dAtA[i] = 0x28
	}
	if m.RequestID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestID))
		i--
		dAtA[i] = 0x20
	}
	if m.Rate != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Rate))
		i--
		dAtA[i] = 0x18
	}
	if m.Multiplier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Multiplier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryCountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataSourceCount != 0 {
		n += 1 + sovQuery(uint64(m.DataSourceCount))
	}
	if m.OracleScriptCount != 0 {
		n += 1 + sovQuery(uint64(m.OracleScriptCount))
	}
	if m.RequestCount != 0 {
		n += 1 + sovQuery(uint64(m.RequestCount))
	}
	return n
}

func (m *QueryDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataSourceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataSourceId != 0 {
		n += 1 + sovQuery(uint64(m.DataSourceId))
	}
	return n
}

func (m *QueryDataSourceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataSource != nil {
		l = m.DataSource.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleScriptRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OracleScriptId != 0 {
		n += 1 + sovQuery(uint64(m.OracleScriptId))
	}
	return n
}

func (m *QueryOracleScriptResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OracleScript != nil {
		l = m.OracleScript.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovQuery(uint64(m.RequestId))
	}
	return n
}

func (m *QueryRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestPacketData != nil {
		l = m.RequestPacketData.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ResponsePacketData != nil {
		l = m.ResponsePacketData.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryValidatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReportersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReportersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reporter) > 0 {
		for _, s := range m.Reporter {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryActiveValidatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryActiveValidatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	return n
}

func (m *QueryRequestSearchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OracleScriptId != 0 {
		n += 1 + sovQuery(uint64(m.OracleScriptId))
	}
	l = len(m.Calldata)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AskCount != 0 {
		n += 1 + sovQuery(uint64(m.AskCount))
	}
	if m.MinCount != 0 {
		n += 1 + sovQuery(uint64(m.MinCount))
	}
	return n
}

func (m *QueryRequestSearchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Test)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRequestPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AskCount != 0 {
		n += 1 + sovQuery(uint64(m.AskCount))
	}
	if m.MinCount != 0 {
		n += 1 + sovQuery(uint64(m.MinCount))
	}
	return n
}

func (m *QueryRequestPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Multiplier != 0 {
		n += 1 + sovQuery(uint64(m.Multiplier))
	}
	if m.Rate != 0 {
		n += 1 + sovQuery(uint64(m.Rate))
	}
	if m.RequestID != 0 {
		n += 1 + sovQuery(uint64(m.RequestID))
	}
	if m.ResolveTime != 0 {
		n += 1 + sovQuery(uint64(m.ResolveTime))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryCountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSourceCount", wireType)
			}
			m.DataSourceCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataSourceCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleScriptCount", wireType)
			}
			m.OracleScriptCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OracleScriptCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCount", wireType)
			}
			m.RequestCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataSourceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataSourceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataSourceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSourceId", wireType)
			}
			m.DataSourceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataSourceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataSourceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataSourceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataSourceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataSource == nil {
				m.DataSource = &DataSource{}
			}
			if err := m.DataSource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleScriptRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleScriptRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleScriptRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleScriptId", wireType)
			}
			m.OracleScriptId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OracleScriptId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleScriptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleScriptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleScriptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleScript", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OracleScript == nil {
				m.OracleScript = &OracleScript{}
			}
			if err := m.OracleScript.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestPacketData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestPacketData == nil {
				m.RequestPacketData = &OracleRequestPacketData{}
			}
			if err := m.RequestPacketData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponsePacketData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponsePacketData == nil {
				m.ResponsePacketData = &OracleResponsePacketData{}
			}
			if err := m.ResponsePacketData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &ValidatorStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReportersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReportersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReportersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReportersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReportersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReportersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reporter = append(m.Reporter, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveValidatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveValidatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveValidatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveValidatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveValidatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveValidatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequestSearchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequestSearchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequestSearchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleScriptId", wireType)
			}
			m.OracleScriptId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OracleScriptId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Calldata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Calldata = append(m.Calldata[:0], dAtA[iNdEx:postIndex]...)
			if m.Calldata == nil {
				m.Calldata = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskCount", wireType)
			}
			m.AskCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AskCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCount", wireType)
			}
			m.MinCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequestSearchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequestSearchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequestSearchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Test", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Test = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequestPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequestPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequestPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskCount", wireType)
			}
			m.AskCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AskCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCount", wireType)
			}
			m.MinCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequestPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequestPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequestPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiplier", wireType)
			}
			m.Multiplier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Multiplier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			m.RequestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestID |= RequestID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolveTime", wireType)
			}
			m.ResolveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolveTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
