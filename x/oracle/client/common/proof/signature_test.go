package proof

import (
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/stretchr/testify/require"
	"github.com/tendermint/tendermint/crypto/tmhash"
	"github.com/tendermint/tendermint/types"
)

/*
{
	"commit": {
        "height": "180355",
        "round": 0,
        "block_id": {
          	"hash": "EF40EA6FC7CACE83B8496B5820D85076505B1F0FF5995F22EAF5A66A5057E168",
          	"parts": {
            	"total": 1,
            	"hash": "64F72682F614F027E37900A985E01251213FCDCA048FF2F3C42A42B90E6AD8F8"
          	}
		},
		"signatures": [
			{
            	"block_id_flag": 2,
            	"validator_address": "7C4E472143CFCF54E5304AD43F97D13C9A962AC0",
            	"timestamp": "2021-05-19T08:20:43.738379434Z",
            	"signature": "WomMshLL6aia6+OyoqpSOl7jVozBX8qUvvx82T2+8xUXuc6wDtk3qMsssP4L2nTY/su1FQM4vJo7xbiEqpL/9Q=="
			},
			{
				"block_id_flag": 2,
				"validator_address": "BB2B1EF40C69782CEB019C328A99CD22A1FDDB08",
				"timestamp": "2021-05-19T08:20:43.956407723Z",
				"signature": "Y94hSLfFhkNyAzCzaYjYeXEh6JZPxZBx1feIBdFl0nkFLUQOBM8CxVBH6HuyiTWYr4noCSgeIZnQ/yhWi4gTDQ=="
			},
			{
				"block_id_flag": 2,
				"validator_address": "617273C8759C21A2D64B293A053DEDEE02E6F17A",
				"timestamp": "2021-05-19T08:20:43.84529527Z",
				"signature": "90x1iCgScjgw8VZATiCi82/5DhTVQFLT0ueeWn8fu5pHiZehJWZ8ZCJ1ehlX7Qety9p4zI2SYo+sn2UQYeYENw=="
			},
			{
				"block_id_flag": 2,
				"validator_address": "C48D87B94082EF70920F9796912353B8ED2936A7",
				"timestamp": "2021-05-19T08:20:43.858322053Z",
				"signature": "KukH1hL0CI0PBZbkLckncBnpC31Kft1AEzWTL4k1VB9yItjR2BNPF2N8kLy5wnqbfwBAcSCAPy6+H0JsCQQXNA=="
			},
			{
				"block_id_flag": 2,
				"validator_address": "133A3336ABA01278EAAEC4E7626FD704753AF765",
				"timestamp": "2021-05-19T08:20:43.90844697Z",
				"signature": "BbCkBS+P3bm30QFp6nuax+gAmHrYF+0hxJtWvOsRT6AFGZVDNeKDoq3m/ACBnz6OXTxQyPoX2i15pDwmKnAWyg=="
			},
			{
				"block_id_flag": 2,
				"validator_address": "1C5BDCDBF79A5FC9A0B1F44C58C9E3FF7CA3BE77",
				"timestamp": "2021-05-19T08:20:43.952766404Z",
				"signature": "DB5CmsJHBr+cNtpSAHdU8F/lndM5FLpwURPXKEzN1gJED1du0VTcf1+QDxMcqv7QC7U0AIi6LtloX8FH9bgXFA=="
			},
			{
				"block_id_flag": 2,
				"validator_address": "24B51F90F4F339F7EBB743AF1F52DD5AE750923E",
				"timestamp": "2021-05-19T08:20:43.87753843Z",
				"signature": "+A05nMAEgp1dKt8RvuY6k4B6e0cNyS26W1zQfjHJWq0na7YsWZzPTAxhkeBANqvFxjyErBUmwt3WDI6dnZ+kDQ=="
			}
        ]
	}
}
*/

func TestGetSignaturesAndPrefix(t *testing.T) {
	header := types.Header{
		ChainID: "band-laozi-testnet1",
	}
	commit := types.Commit{
		Height: 180355,
		Round:  0,
		BlockID: types.BlockID{
			Hash: hexToBytes("EF40EA6FC7CACE83B8496B5820D85076505B1F0FF5995F22EAF5A66A5057E168"),
			PartSetHeader: types.PartSetHeader{
				Total: 1,
				Hash:  hexToBytes("64F72682F614F027E37900A985E01251213FCDCA048FF2F3C42A42B90E6AD8F8"),
			},
		},
		Signatures: []types.CommitSig{
			{
				BlockIDFlag:      2,
				ValidatorAddress: hexToBytes("7C4E472143CFCF54E5304AD43F97D13C9A962AC0"),
				Timestamp:        parseTime("2021-05-19T08:20:43.738379434Z"),
				Signature:        base64ToBytes("WomMshLL6aia6+OyoqpSOl7jVozBX8qUvvx82T2+8xUXuc6wDtk3qMsssP4L2nTY/su1FQM4vJo7xbiEqpL/9Q=="),
			},
			{
				BlockIDFlag:      2,
				ValidatorAddress: hexToBytes("BB2B1EF40C69782CEB019C328A99CD22A1FDDB08"),
				Timestamp:        parseTime("2021-05-19T08:20:43.956407723Z"),
				Signature:        base64ToBytes("Y94hSLfFhkNyAzCzaYjYeXEh6JZPxZBx1feIBdFl0nkFLUQOBM8CxVBH6HuyiTWYr4noCSgeIZnQ/yhWi4gTDQ=="),
			},
			{
				BlockIDFlag:      2,
				ValidatorAddress: hexToBytes("617273C8759C21A2D64B293A053DEDEE02E6F17A"),
				Timestamp:        parseTime("2021-05-19T08:20:43.84529527Z"),
				Signature:        base64ToBytes("90x1iCgScjgw8VZATiCi82/5DhTVQFLT0ueeWn8fu5pHiZehJWZ8ZCJ1ehlX7Qety9p4zI2SYo+sn2UQYeYENw=="),
			},
			{
				BlockIDFlag:      2,
				ValidatorAddress: hexToBytes("C48D87B94082EF70920F9796912353B8ED2936A7"),
				Timestamp:        parseTime("2021-05-19T08:20:43.858322053Z"),
				Signature:        base64ToBytes("KukH1hL0CI0PBZbkLckncBnpC31Kft1AEzWTL4k1VB9yItjR2BNPF2N8kLy5wnqbfwBAcSCAPy6+H0JsCQQXNA=="),
			},
			{
				BlockIDFlag:      2,
				ValidatorAddress: hexToBytes("133A3336ABA01278EAAEC4E7626FD704753AF765"),
				Timestamp:        parseTime("2021-05-19T08:20:43.90844697Z"),
				Signature:        base64ToBytes("BbCkBS+P3bm30QFp6nuax+gAmHrYF+0hxJtWvOsRT6AFGZVDNeKDoq3m/ACBnz6OXTxQyPoX2i15pDwmKnAWyg=="),
			},
			{
				BlockIDFlag:      2,
				ValidatorAddress: hexToBytes("1C5BDCDBF79A5FC9A0B1F44C58C9E3FF7CA3BE77"),
				Timestamp:        parseTime("2021-05-19T08:20:43.952766404Z"),
				Signature:        base64ToBytes("DB5CmsJHBr+cNtpSAHdU8F/lndM5FLpwURPXKEzN1gJED1du0VTcf1+QDxMcqv7QC7U0AIi6LtloX8FH9bgXFA=="),
			},
			{
				BlockIDFlag:      2,
				ValidatorAddress: hexToBytes("24B51F90F4F339F7EBB743AF1F52DD5AE750923E"),
				Timestamp:        parseTime("2021-05-19T08:20:43.87753843Z"),
				Signature:        base64ToBytes("+A05nMAEgp1dKt8RvuY6k4B6e0cNyS26W1zQfjHJWq0na7YsWZzPTAxhkeBANqvFxjyErBUmwt3WDI6dnZ+kDQ=="),
			},
		},
	}
	sh := types.SignedHeader{
		Header: &header,
		Commit: &commit,
	}
	sig, err := GetSignaturesAndPrefix(&sh)
	require.NoError(t, err)

	expected := []TMSignature{
		{
			R:                hexToBytes("F74C75882812723830F156404E20A2F36FF90E14D54052D3D2E79E5A7F1FBB9A"),
			S:                hexToBytes("478997A125667C6422757A1957ED07ADCBDA78CC8D92628FAC9F651061E60437"),
			V:                28,
			SignedDataPrefix: hexToBytes("7808021183C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122064F72682F614F027E37900A985E01251213FCDCA048FF2F3C42A42B90E6AD8F82A0C08DB9493850610A6DD889303321362616E642D6C616F7A692D746573746E657431"),
		},
		{
			R:                hexToBytes("F80D399CC004829D5D2ADF11BEE63A93807A7B470DC92DBA5B5CD07E31C95AAD"),
			S:                hexToBytes("276BB62C599CCF4C0C6191E04036ABC5C63C84AC1526C2DDD60C8E9D9D9FA40D"),
			V:                28,
			SignedDataPrefix: hexToBytes("7808021183C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122064F72682F614F027E37900A985E01251213FCDCA048FF2F3C42A42B90E6AD8F82A0C08DB9493850610FED8B8A203321362616E642D6C616F7A692D746573746E657431"),
		},
		{
			R:                hexToBytes("2AE907D612F4088D0F0596E42DC9277019E90B7D4A7EDD401335932F8935541F"),
			S:                hexToBytes("7222D8D1D8134F17637C90BCB9C27A9B7F00407120803F2EBE1F426C09041734"),
			V:                28,
			SignedDataPrefix: hexToBytes("7808021183C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122064F72682F614F027E37900A985E01251213FCDCA048FF2F3C42A42B90E6AD8F82A0C08DB949385061085E9A39903321362616E642D6C616F7A692D746573746E657431"),
		},
		{
			R:                hexToBytes("0C1E429AC24706BF9C36DA52007754F05FE59DD33914BA705113D7284CCDD602"),
			S:                hexToBytes("440F576ED154DC7F5F900F131CAAFED00BB5340088BA2ED9685FC147F5B81714"),
			V:                27,
			SignedDataPrefix: hexToBytes("7808021183C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122064F72682F614F027E37900A985E01251213FCDCA048FF2F3C42A42B90E6AD8F82A0C08DB9493850610C49FA8C603321362616E642D6C616F7A692D746573746E657431"),
		},
		{
			R:                hexToBytes("63DE2148B7C58643720330B36988D8797121E8964FC59071D5F78805D165D279"),
			S:                hexToBytes("052D440E04CF02C55047E87BB2893598AF89E809281E2199D0FF28568B88130D"),
			V:                28,
			SignedDataPrefix: hexToBytes("7808021183C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122064F72682F614F027E37900A985E01251213FCDCA048FF2F3C42A42B90E6AD8F82A0C08DB9493850610ABBF86C803321362616E642D6C616F7A692D746573746E657431"),
		},
		{
			R:                hexToBytes("05B0A4052F8FDDB9B7D10169EA7B9AC7E800987AD817ED21C49B56BCEB114FA0"),
			S:                hexToBytes("0519954335E283A2ADE6FC00819F3E8E5D3C50C8FA17DA2D79A43C262A7016CA"),
			V:                27,
			SignedDataPrefix: hexToBytes("7808021183C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122064F72682F614F027E37900A985E01251213FCDCA048FF2F3C42A42B90E6AD8F82A0C08DB9493850610FA9997B103321362616E642D6C616F7A692D746573746E657431"),
		},
		{
			R:                hexToBytes("5A898CB212CBE9A89AEBE3B2A2AA523A5EE3568CC15FCA94BEFC7CD93DBEF315"),
			S:                hexToBytes("17B9CEB00ED937A8CB2CB0FE0BDA74D8FECBB5150338BC9A3BC5B884AA92FFF5"),
			V:                28,
			SignedDataPrefix: hexToBytes("7808021183C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122064F72682F614F027E37900A985E01251213FCDCA048FF2F3C42A42B90E6AD8F82A0C08DB9493850610AA8D8BE002321362616E642D6C616F7A692D746573746E657431"),
		},
	}
	require.Equal(t, expected, sig)
}

func TestVerifySignature(t *testing.T) {
	signatures := []TMSignature{
		{
			R:                hexToBytes("F74C75882812723830F156404E20A2F36FF90E14D54052D3D2E79E5A7F1FBB9A"),
			S:                hexToBytes("478997A125667C6422757A1957ED07ADCBDA78CC8D92628FAC9F651061E60437"),
			V:                28,
			SignedDataPrefix: hexToBytes("7808021183C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122064F72682F614F027E37900A985E01251213FCDCA048FF2F3C42A42B90E6AD8F82A0C08DB9493850610A6DD889303321362616E642D6C616F7A692D746573746E657431"),
		},
		{
			R:                hexToBytes("F80D399CC004829D5D2ADF11BEE63A93807A7B470DC92DBA5B5CD07E31C95AAD"),
			S:                hexToBytes("276BB62C599CCF4C0C6191E04036ABC5C63C84AC1526C2DDD60C8E9D9D9FA40D"),
			V:                28,
			SignedDataPrefix: hexToBytes("7808021183C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122064F72682F614F027E37900A985E01251213FCDCA048FF2F3C42A42B90E6AD8F82A0C08DB9493850610FED8B8A203321362616E642D6C616F7A692D746573746E657431"),
		},
		{
			R:                hexToBytes("2AE907D612F4088D0F0596E42DC9277019E90B7D4A7EDD401335932F8935541F"),
			S:                hexToBytes("7222D8D1D8134F17637C90BCB9C27A9B7F00407120803F2EBE1F426C09041734"),
			V:                28,
			SignedDataPrefix: hexToBytes("7808021183C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122064F72682F614F027E37900A985E01251213FCDCA048FF2F3C42A42B90E6AD8F82A0C08DB949385061085E9A39903321362616E642D6C616F7A692D746573746E657431"),
		},
		{
			R:                hexToBytes("0C1E429AC24706BF9C36DA52007754F05FE59DD33914BA705113D7284CCDD602"),
			S:                hexToBytes("440F576ED154DC7F5F900F131CAAFED00BB5340088BA2ED9685FC147F5B81714"),
			V:                27,
			SignedDataPrefix: hexToBytes("7808021183C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122064F72682F614F027E37900A985E01251213FCDCA048FF2F3C42A42B90E6AD8F82A0C08DB9493850610C49FA8C603321362616E642D6C616F7A692D746573746E657431"),
		},
		{
			R:                hexToBytes("63DE2148B7C58643720330B36988D8797121E8964FC59071D5F78805D165D279"),
			S:                hexToBytes("052D440E04CF02C55047E87BB2893598AF89E809281E2199D0FF28568B88130D"),
			V:                28,
			SignedDataPrefix: hexToBytes("7808021183C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122064F72682F614F027E37900A985E01251213FCDCA048FF2F3C42A42B90E6AD8F82A0C08DB9493850610ABBF86C803321362616E642D6C616F7A692D746573746E657431"),
		},
		{
			R:                hexToBytes("05B0A4052F8FDDB9B7D10169EA7B9AC7E800987AD817ED21C49B56BCEB114FA0"),
			S:                hexToBytes("0519954335E283A2ADE6FC00819F3E8E5D3C50C8FA17DA2D79A43C262A7016CA"),
			V:                27,
			SignedDataPrefix: hexToBytes("7808021183C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122064F72682F614F027E37900A985E01251213FCDCA048FF2F3C42A42B90E6AD8F82A0C08DB9493850610FA9997B103321362616E642D6C616F7A692D746573746E657431"),
		},
		{
			R:                hexToBytes("5A898CB212CBE9A89AEBE3B2A2AA523A5EE3568CC15FCA94BEFC7CD93DBEF315"),
			S:                hexToBytes("17B9CEB00ED937A8CB2CB0FE0BDA74D8FECBB5150338BC9A3BC5B884AA92FFF5"),
			V:                28,
			SignedDataPrefix: hexToBytes("7808021183C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122064F72682F614F027E37900A985E01251213FCDCA048FF2F3C42A42B90E6AD8F82A0C08DB9493850610AA8D8BE002321362616E642D6C616F7A692D746573746E657431"),
		},
	}

	evmAddresses := []common.Address{
		common.HexToAddress("0x3b759C4d728e50D5cC04c75f596367829d5b5061"),
		common.HexToAddress("0x49897b9D617AD700b84a935616E81f9f4b5305bc"),
		common.HexToAddress("0x7054bd1Fd7535A0DD552361e634196b1574594BB"),
		common.HexToAddress("0x7f2d13768c33155d4f77F9aB3eE23C3c6F820962"),
		common.HexToAddress("0xc4c14A16c0d8703Ad1786860546BDC47cdF94974"),
		common.HexToAddress("0xdDbd13b415ce90D4f323085A88edBE0a902Bc21D"),
		common.HexToAddress("0xe6778d28Ec8Bab3434CAfbE19FE13d889Dc79208"),
	}

	blockHash := hexToBytes("EF40EA6FC7CACE83B8496B5820D85076505B1F0FF5995F22EAF5A66A5057E168")

	for i, sig := range signatures {
		msg := append(sig.SignedDataPrefix, blockHash...)
		msg = append(msg, sig.SignedDataSuffix...)

		sigBytes := append(sig.R, sig.S...)
		sigBytes = append(sigBytes, sig.V-27)
		pub, err := crypto.SigToPub(tmhash.Sum(msg), sigBytes)
		require.Nil(t, err)
		require.Equal(t, evmAddresses[i], crypto.PubkeyToAddress(*pub))
	}
}
