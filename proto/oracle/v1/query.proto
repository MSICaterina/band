syntax = "proto3";
package oracle.v1;

option go_package = "github.com/bandprotocol/chain/x/oracle/types";

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "oracle/v1/oracle.proto";

// Query defines the gRPC querier service.
service Query {
  // Counts queries the number of existing data sources, oracle scripts, and
  // requests.
  rpc Counts(QueryCountsRequest) returns (QueryCountsResponse) {
    option (google.api.http).get = "/oracle/v1/counts";
  }

  // Data queries content of the data source or oracle script for given SHA256
  // file hash.
  rpc Data(QueryDataRequest) returns (QueryDataResponse) {
    option (google.api.http).get = "/oracle/v1/data/{data_hash}";
  }

  // DataSource queries data source summary info for given data source id.
  rpc DataSource(QueryDataSourceRequest) returns (QueryDataSourceResponse) {
    option (google.api.http).get = "/oracle/v1/data_sources/{data_source_id}";
  }

  // OracleScript queries oracle script summary info for given oracle script id.
  rpc OracleScript(QueryOracleScriptRequest)
      returns (QueryOracleScriptResponse) {
    option (google.api.http).get =
        "/oracle/v1/oracle_script/{oracle_script_id}";
  }

  // Request queries request info for given request id.
  rpc Request(QueryRequestRequest) returns (QueryRequestResponse) {
    option (google.api.http).get = "/oracle/v1/request/{request_id}";
  }

  // Validator queries properties of given validator address.
  rpc Validator(QueryValidatorRequest) returns (QueryValidatorResponse) {
    option (google.api.http).get = "/oracle/v1/validators/{validator_address}";
  }

  // Reporters queries all reporters associated with given validator address.
  rpc Reporters(QueryReportersRequest) returns (QueryReportersResponse) {
    option (google.api.http).get = "/oracle/v1/reporters/{validator_address}";
  }

  // ActiveValidators queries all active oracle validators.
  rpc ActiveValidators(QueryActiveValidatorsRequest)
      returns (QueryActiveValidatorsResponse) {
    option (google.api.http).get = "/oracle/v1/active_validators";
  }

  // Params queries parameters used for runnning bandchain network.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/oracle/v1/params";
  }

  // RequestSearch queries the latest request that match search criteria.
  rpc RequestSearch(QueryRequestSearchRequest)
      returns (QueryRequestSearchResponse) {
    option (google.api.http).get = "/oracle/v1/request_search";
  }

  // RequestPrice queries the latest price on standard price reference oracle
  // script.
  rpc RequestPrice(QueryRequestPriceRequest)
      returns (QueryRequestPriceResponse) {
    option (google.api.http).post = "/oracle/v1/request_prices";
  }
}

// QueryCountsRequest is request type for the Query/Count RPC method.
message QueryCountsRequest {}

// QueryCountsResponse is response type for the Query/Count RPC method.
message QueryCountsResponse {
  // DataSourceCount is total number of data sources available on the chain
  int64 data_source_count = 1;
  // OracleScriptCount is total number of oracle scripts available on the chain
  int64 oracle_script_count = 2;
  // RequestCount is total number of requests submitted to the chain
  int64 request_count = 3;
}

// QueryDataRequest is request type for the Query/Data RPC method.
message QueryDataRequest {
  // DataHash is SHA256 hash of the file's content, which can be data source or
  // oracle script
  string data_hash = 1;
}

// QueryDataResponse is response type for the Query/Data RPC method.
message QueryDataResponse {
  // Data is file's content, which can be data source or oracle script
  bytes data = 1;
}

// QueryDataSourceRequest is request type for the Query/DataSource RPC method.
message QueryDataSourceRequest {
  // DataSourceID is ID of a data source script
  int64 data_source_id = 1;
}

// QueryDataSourceResponse is response type for the Query/DataSource RPC method.
message QueryDataSourceResponse {
  // DataSource is summary information of a data source
  DataSource data_source = 1;
}

// QueryOracleScriptRequest is request type for the Query/OracleScript RPC
// method.
message QueryOracleScriptRequest {
  // OracleScriptID is ID of an oracle script
  int64 oracle_script_id = 1;
}

// QueryOracleScriptResponse is response type for the Query/OracleScript RPC
// method.
message QueryOracleScriptResponse {
  // OracleScript is summary information of an oracle script
  OracleScript oracle_script = 1;
}

// QueryRequestRequest is request type for the Query/Request RPC method.
message QueryRequestRequest {
  // RequestID is ID of an oracle request
  int64 request_id = 1;
}

// QueryRequestResponse is response type for the Query/Request RPC method.
message QueryRequestResponse {
  // RequestPacketData is information of oracle request submitted by a client
  OracleRequestPacketData request_packet_data = 1;
  // ResponsePacketData is information of oracle result that fulfilled the
  // oracle request. The result can be empty if the request has not been
  // fulfilled yet.
  OracleResponsePacketData response_packet_data = 2;
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // pagination defines an optional pagination for the request.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryValidatorRequest is request type for the Query/Validator RPC method.
message QueryValidatorRequest {
  // ValidatorAddress is address of a validator
  string validator_address = 1;
}

// QueryValidatorResponse is response type for the Query/Validator RPC method.
message QueryValidatorResponse {
  // Status is status of a validator e.g. active/inactive
  ValidatorStatus status = 1;
}

// QueryReportersRequest is request type for the Query/Reporters RPC method.
message QueryReportersRequest {
  // ValidatorAddress is a validator address
  string validator_address = 1;
}

// QueryReportersResponse is response type for the Query/Reporters RPC method.
message QueryReportersResponse {
  // Reporter is a list of account addresses of reporters
  repeated string reporter = 1;
}

// QueryActiveValidatorsRequest is request type for the Query/ActiveValidators
// RPC method.
message QueryActiveValidatorsRequest {}

// QueryActiveValidatorsResponse is response type for the Query/ActiveValidators
// RPC method.
message QueryActiveValidatorsResponse {
  // Count is number of active validators
  int64 count = 1;
}

// QueryRequestSearchRequest is request type for the Query/RequestSearch RPC
// method.
message QueryRequestSearchRequest {
  // OracleScriptID is ID of an oracle script
  int64 oracle_script_id = 1;
  // Calldata is OBI-encoded data as argument params for the oracle script
  bytes calldata = 2;
  // AskCount is number of validators allowed for fulfilling the request
  int64 ask_count = 3;
  // MinCount is number of validators required for fulfilling the request
  int64 min_count = 4;
}

// QueryRequestSearchResponse is response type for the Query/RequestSearch RPC
// method.
message QueryRequestSearchResponse { string test = 1; }

// QueryRequestPriceRequest is request type for the Query/RequestPrice RPC
// method.
message QueryRequestPriceRequest {
  // Symbol is unit of data indicating what the data is
  string symbol = 1;
  // AskCount is number of validators allowed for fulfilling the request
  int64 ask_count = 2;
  // MinCount is number of validators required for fulfilling the request
  int64 min_count = 3;
}

// QueryRequestPriceResponse is response type for the Query/RequestPrice RPC
// method.
message QueryRequestPriceResponse {
  // OracleScriptID is ID of an oracle script
  int64 oracle_script_id = 1;
  // Calldata is OBI-encoded data as argument params for the oracle script
  bytes calldata = 2;
  // AskCount is number of validators allowed for fulfilling the request
  int64 ask_count = 3;
  // MinCount is number of validators required to fulfill the request
  int64 min_count = 4;
}
